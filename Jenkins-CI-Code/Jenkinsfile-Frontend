pipeline {
    agent any
    tools {
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_DEFAULT_REGION = 'us-east-1'
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout Code') {
            steps {
                git credentialsId: 'GITHUB', url: 'https://github.com/kaviara-14/End-to-End-Kubernetes-Three-Tier-DevSecOps-Project.git'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                dir('Application-Code/frontend') {
                    withSonarQubeEnv('sonar-server') {
                        sh '''$SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=frontend \
                        -Dsonar.projectKey=frontend'''
                    }
                }
            }
        }
        stage('Quality Gate Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/frontend') {
                    sh 'trivy fs . > trivyfs.txt'
                    archiveArtifacts artifacts: 'trivyfs.txt'
                }
            }
        }
        stage('Docker Image Build') {
            steps {
                script {
                    dir('Application-Code/frontend') {
                        sh 'docker build -t frontend-app .'
                    }
                }
            }
        }
        stage('ECR Image Push') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID'), 
                                     string(credentialsId: 'ECR_REPO1', variable: 'AWS_ECR_REPO_NAME')]) {
                        sh '''
                            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
                            docker tag frontend-app ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                        '''
                    }
                }
            }
        }
        stage('Trivy Image Scan') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID'),
                                     string(credentialsId: 'ECR_REPO1', variable: 'AWS_ECR_REPO_NAME')]) {
                        def imageTag = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}"
                        echo "Scanning image: ${imageTag}"
                        sh "trivy image ${imageTag} > trivyimage.txt"
                        archiveArtifacts artifacts: 'trivyimage.txt'
                    }
                }
            }
        }
        stage('Update Deployment File') {
            steps {
                dir('Kubernetes-Manifests-file/Frontend') {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN'),
                    string(credentialsId: 'ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID'),
                                     string(credentialsId: 'ECR_REPO1', variable: 'AWS_ECR_REPO_NAME')]) {
                        script {
                            // Set git config for user information
                            sh '''
                                git config user.email "kaviarasuvpl14@gmail.com"
                                git config user.name "kaviara-14"
                            '''
                            
                            // Construct image tag and update deployment.yaml
                            def imageTag = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}"
                            echo "Updating image to ${imageTag} in deployment.yaml"
                            
                            // Update deployment.yaml using sed to replace image tag
                            sh "sed -i 's|image: .*|image: ${imageTag}|' deployment.yaml"
                            
                            // Git commit and push changes
                            sh '''
                                git add deployment.yaml
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                                git push --force https://${GITHUB_TOKEN}@github.com/kaviara-14/End-to-End-Kubernetes-Three-Tier-DevSecOps-Project HEAD:master
                            '''
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
